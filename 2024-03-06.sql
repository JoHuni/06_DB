-- TB_GRADE 테이블 생성
CREATE TABLE TB_GRADE ( 
	GRADE_CODE VARCHAR2(10) PRIMARY KEY, GRADE_NAME VARCHAR2(20)
);

-- TB_AREA 테이블 생성
CREATE TABLE TB_AREA (
	AREA_CODE VARCHAR2(10) PRIMARY KEY, AREA_NAME VARCHAR2(20)
);

-- TB_MEMBER 테이블 생성
CREATE TABLE TB_MEMBER (
	MEMBERID VARCHAR2(20) PRIMARY KEY, MEMBERPWD VARCHAR2(20),
	MEMBER_NAME VARCHAR2(50), GRADE VARCHAR2(10), AREA_CODE VARCHAR2(10),
	FOREIGN KEY (GRADE) REFERENCES TB_GRADE(GRADE_CODE), FOREIGN KEY (AREA_CODE) REFERENCES TB_AREA(AREA_CODE)
);

-- 데이터 삽입 
-- TB_GRADE 테이블 데이터 삽입
INSERT INTO TB_GRADE (GRADE_CODE, GRADE_NAME) VALUES ('10', '일반회원');
INSERT INTO TB_GRADE (GRADE_CODE, GRADE_NAME) VALUES ('20', '우수회원');
INSERT INTO TB_GRADE (GRADE_CODE, GRADE_NAME) VALUES ('30', '특별회원');

-- TB_AREA 테이블 데이터 삽입
INSERT INTO TB_AREA (AREA_CODE, AREA_NAME) VALUES ('02', '서울');
INSERT INTO TB_AREA (AREA_CODE, AREA_NAME) VALUES ('031', '경기');
INSERT INTO TB_AREA (AREA_CODE, AREA_NAME) VALUES ('032', '인천');

-- TB_MEMBER 테이블 데이터 삽입
INSERT INTO TB_MEMBER (MEMBERID, MEMBERPWD, MEMBER_NAME, GRADE, AREA_CODE) VALUES ('hong01', 'pass01', '홍길동', '10', '02');
INSERT INTO TB_MEMBER (MEMBERID, MEMBERPWD, MEMBER_NAME, GRADE, AREA_CODE) VALUES ('leess99', 'pass02', '이순신', '10', '032'); 
INSERT INTO TB_MEMBER (MEMBERID, MEMBERPWD, MEMBER_NAME, GRADE, AREA_CODE) VALUES ('SS50000', 'pass03', '신사임당', '30', '031');
INSERT INTO TB_MEMBER (MEMBERID, MEMBERPWD, MEMBER_NAME, GRADE, AREA_CODE) VALUES ('1u93', 'pass04', '아이유', '30', '02');
INSERT INTO TB_MEMBER (MEMBERID, MEMBERPWD, MEMBER_NAME, GRADE, AREA_CODE) VALUES ('pcs1234', 'pass05', '박철수', '20', '031');
INSERT INTO TB_MEMBER (MEMBERID, MEMBERPWD, MEMBER_NAME, GRADE, AREA_CODE) VALUES ('you_is', 'pass06', '유재석', '10', '02');
INSERT INTO TB_MEMBER (MEMBERID, MEMBERPWD, MEMBER_NAME, GRADE, AREA_CODE) VALUES ('kyh9876', 'pass07', '김영희', '20', '031');
SELECT * FROM TB_GRADE;
SELECT * FROM TB_MEMBER;

-- 모든 회원의 이름과 등급을 조회하기
SELECT MEMBER_NAME, GRADE_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE);

-- 등급이 일반회원인 회원을 조회
SELECT * FROM TB_MEMBER
WHERE GRADE = 10;

-- 경기 지역에 거주하는 회원의 아이디와 이름을 조회
SELECT MEMBERID, MEMBER_NAME 
FROM TB_MEMBER
JOIN TB_AREA USING (AREA_CODE)
WHERE AREA_NAME = '경기';

-- 등급이 우수회원이고
-- 이름에 '이'가 포함된 회원의 이름을 조회하기
SELECT MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE MEMBER_NAME LIKE '%이%'
AND GRADE_NAME = '우수회원';

-- 등급이 '일반회원'인 회원의 이름을 알파벳순으로 정렬
SELECT MEMBERID, MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
AND GRADE_NAME = '일반회원'
ORDER BY MEMBER_NAME;

 -- 등급이 틀별 회원이고 이름에 '신'이 포함된 회원의 아이디와 이름 조회하기
SELECT MEMBERID, MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE MEMBER_NAME LIKE '%신%'
AND GRADE_NAME = '특별회원';

-- '서울'지역에 거주하고 '일반회원' 등급 회원의 이름 조회
SELECT MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
JOIN TB_AREA USING (AREA_CODE)
WHERE AREA_NAME = '서울'
AND GRADE_NAME = '일반회원';

-- 특정 지역의 회원 수 조회
SELECT AREA_NAME, COUNT(*)
FROM TB_MEMBER
JOIN TB_AREA USING (AREA_CODE)
GROUP BY AREA_NAME;

-- 특정 회원의 지역 정보 조회
SELECT MEMBER_NAME, AREA_NAME
FROM TB_MEMBER
JOIN TB_AREA USING(AREA_CODE); 

-- 일반 회원과 우수 회원 수 비교
SELECT GRADE, COUNT(*)
FROM TB_MEMBER
GROUP BY GRADE;


-- SS50000 회원의 등급과 이름 조회
SELECT GRADE, MEMBER_NAME
FROM TB_MEMBER
WHERE MEMBERID = 'SS50000';

-- SELECT JOIN을 활용한 서브쿼리
-- TB_MEMBER 테이블에서 GRADE가 우수회원 이면서
-- AREA_CODE 가 '031'인 회원의 이름 조회
SELECT MEMBER_NAME
FROM TB_MEMBER
WHERE GRADE = (
	SELECT GRADE_CODE
	FROM TB_GRADE
	WHERE GRADE_NAME = '우수회원'
)
AND AREA_CODE = '031';

-- TB_MEMBER 테이블에서 GRADE가 일반회원이면서 
-- AREA_CODE가 02가 아닌 회원의 아디를 조회
SELECT MEMBERID
FROM TB_MEMBER
WHERE GRADE = (
	SELECT GRADE_CODE
	FROM TB_GRADE
	WHERE GRADE_NAME = '일반회원'
)
AND AREA_CODE != '02';
SELECT * FROM TB_MEMBER;

-- TB_MEMBER 테이블에서 GRADE가 '특뱔회원'이면서
-- AREA_CODE가 '031'이 아닌 회원들의 회원 이름 조회하기
SELECT MEMBER_NAME
FROM TB_MEMBER
WHERE GRADE = (
	SELECT GRADE_CODE
	FROM TB_GRADE
	WHERE GRADE_NAME = '특별회원'
)
AND AREA_CODE != '031';

-- TB_MEMBER 테이블에서 AREA_CODE가 031이거나 032인 회원들의 이름 조회하기
SELECT MEMBER_NAME
FROM TB_MEMBER
WHERE AREA_CODE IN ('031', '032');

-- SELECT ROWNUM을 활용한 예제
-- ROWNUM 이란? SELECT 해온 데이터에 번호를 붙이는 것
-- 번호를 붙여 원하는 만큼의 개수만 가져오고 싶을 때 사용

-- TB_MEMBER 회원들 중에서 ROWNUM이 3 이하인 데이터 조회
SELECT * FROM
TB_MEMBER
WHERE ROWNUM <= 3;

-- TB_MEMBER 테이블에서
-- 지역코드가 031인 회원 중에서
-- 처음 3명의 아이디와 이름 조회하기
SELECT MEMBERID, MEMBER_NAME
FROM TB_MEMBER
WHERE AREA_CODE = '031'
AND ROWNUM <= 3;

-- TB_MEMBER 이름순으로 상위 3개 멤버 조회하기
SELECT MEMBERID, MEMBER_NAME
FROM (
	SELECT MEMBERID, MEMBER_NAME, ROWNUM AS RN
	FROM TB_MEMBER
	ORDER BY MEMBER_NAME
)
WHERE RN <= 3;

--1: TB_GRADE 테이블에서 모든 등급 코드와 등급 이름을 조회
SELECT *
FROM TB_GRADE;

--2: TB_AREA 테이블에서 지역 코드가 '02'인 지역의 이름을 조회
SELECT AREA_NAME
FROM TB_AREA ta 
WHERE AREA_CODE = '02';
--3: TB_MEMBER 테이블에서 모든 회원의 이름과 등급을 조회
SELECT *
FROM TB_MEMBER;

--4: TB_MEMBER 테이블에서 이름이 '이순신'인 회원의 아이디를 조회
SELECT MEMBERID
FROM TB_MEMBER
WHERE MEMBER_NAME = '이순신';

--5: TB_MEMBER 테이블에서 등급이 '20'인 회원의 이름과 지역 코드를 조회
SELECT MEMBER_NAME, AREA_CODE
FROM TB_MEMBER
WHERE GRADE = '20';

--6: TB_MEMBER 테이블에서 지역이 '서울'인 회원의 아이디와 이름을 조회
SELECT MEMBERID, MEMBER_NAME
FROM TB_MEMBER
JOIN TB_AREA USING (AREA_CODE)
WHERE AREA_NAME = '서울';

--7: TB_MEMBER 테이블에서 등급이 '특별회원'인 회원의 수를 조회
SELECT COUNT(*)
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME  = '특별회원';

--8: TB_MEMBER 테이블에서 이름이 '홍길동'이거나 '박철수'인 회원의 아이디를 조회
SELECT MEMBERID
FROM TB_MEMBER
WHERE MEMBER_NAME IN ('홍길동', '박철수');
--9: TB_MEMBER 테이블에서 등급이 '우수회원'이면서 지역 코드가 '031'인 회원의 이름을 조회
SELECT MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME  = '우수회원'
AND AREA_CODE = '031';

--10: TB_MEMBER 테이블에서 아이디가 'kyh9876'인 회원의 등급을 조회
SELECT GRADE
FROM TB_MEMBER
WHERE MEMBERID = 'kyh9876';

--11: TB_MEMBER 테이블에서 등급이 '일반회원'이면서 지역이 '경기' 또는 '인천'인 회원의 아이디와 이름을 조회
SELECT MEMBERID, MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
JOIN TB_AREA USING (AREA_CODE)
WHERE GRADE_NAME  = '우수회원'
AND AREA_NAME IN ('경기', '인천');

--12: TB_MEMBER 테이블에서 등급이 '특별회원'인 회원 중에서 지역이 '서울'이 아닌 회원의 수를 조회
SELECT COUNT(*) 
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
JOIN TB_AREA USING (AREA_CODE)
WHERE GRADE_NAME  = '특별회원'
AND AREA_NAME != '서울';

--13: TB_MEMBER 테이블에서 등급이 '우수회원'이면서 이름이 '김영희'인 회원의 등급과 지역을 조회
SELECT GRADE, AREA_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
JOIN TB_AREA USING (AREA_CODE)
WHERE GRADE_NAME  = '우수회원'
AND MEMBER_NAME = '김영희';

--14: TB_MEMBER 테이블에서 등급이 '일반회원'이고 지역이 '경기'인 회원 중에서 가입일이 2024년 3월 1일 이후인 회원의 이름을 조회
SELECT * FROM TB_MEMBER;
SELECT * FROM TB_GRADE;
SELECT MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
JOIN TB_AREA USING (AREA_CODE)
WHERE AREA_NAME  = (
	SELECT AREA_NAME
	FROM TB_AREA
	WHERE AREA_NAME = '경기'
)
AND GRADE_NAME = '일반회원';

--15: TB_MEMBER 테이블에서 등급이 '특별회원'이면서 아이디가 'SS50000'이거나 '1u93'인 회원의 지역을 조회
SELECT AREA_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
JOIN TB_AREA USING (AREA_CODE)
WHERE GRADE_NAME  = '특별회원'
AND MEMBERID IN ('SS50000', '1u93');

--16: TB_MEMBER 테이블에서 등급이 '우수회원'이면서 이름에 '유'가 포함된 회원의 아이디를 조회
SELECT MEMBERID
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME  = '우수회원'
AND MEMBER_NAME LIKE '%유%';

--17: TB_MEMBER 테이블에서 등급이 '일반회원'이면서 가입일이 현재 날짜보다 이전인 회원의 수를 조회
SELECT COUNT(*)
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME  = '일반회원';

-- YYYY:MM:DD hh:mm:ss 년월일은 대문자, 시분초는 소문자

--18: TB_MEMBER 테이블에서 등급이 '특별회원'이면서 가장 오래된 회원의 아이디를 조회하
SELECT MEMBERID
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME  = '특별회원';

--19: TB_MEMBER 테이블에서 등급이 '우수회원'이면서 이름이 '신사임당'이 아닌 회원의 수를 조회
SELECT COUNT(*)
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME  = '우수회원'
AND MEMBER_NAME != '신사임당';

--20: TB_MEMBER 테이블에서 등급이 '일반회원'이면서 지역이 '서울'인 회원의 이름과 등급을 조회 단, 결과를 등급에 따라 내림차순으로 정렬
SELECT MEMBER_NAME, GRADE_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
JOIN TB_AREA USING (AREA_CODE)
WHERE GRADE_NAME  = '일반회원'
AND AREA_NAME = '서울'
ORDER BY GRADE DESC;

--21: TB_MEMBER 테이블에서 회원 이름의 길이가 4 이상인 회원의 아이디와 이름을 조회
SELECT MEMBER_NAME, GRADE_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE LENGTH(MEMBER_NAME) >= 4;

--22: TB_MEMBER 테이블에서 등급이 '특별회원'이면서 이름이 '김영희'가 아닌 회원의 아이디를 조회
SELECT MEMBERID
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME  = '특별회원'
AND MEMBER_NAME != '김영희';

--23: TB_MEMBER 테이블에서 등급이 '일반회원'인 회원 중에서 이름이 '김영희'이거나 '아이유'인 회원의 수를 조회
SELECT COUNT(*)
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME  = '일반회원'
AND MEMBER_NAME IN ('김영희', '아이유');

--24: TB_MEMBER 테이블에서 등급이 '특별회원'이 아니면서 이름이 '홍길동'이 아닌 회원의 아이디를 조회
SELECT MEMBERID
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME != '특별회원'
AND MEMBER_NAME != '홍길동';

--25: TB_MEMBER 테이블에서 등급이 '일반회원'이면서 지역이 '인천' 또는 '경기'인 회원의 아이디와 이름을 조회
SELECT MEMBERID, MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
JOIN TB_AREA USING (AREA_CODE)
WHERE GRADE_NAME = '일반회원'
AND AREA_NAME IN ('인천', '경기');

--26: TB_MEMBER 테이블에서 등급이 '우수회원'이면서 이름이 '홍길동'이 아니면서 가장 최근에 가입한 회원의 아이디를 조회
SELECT MEMBERID
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME = '우수회원'
AND MEMBER_NAME != '홍길동';

--27: TB_MEMBER 테이블에서 등급이 '우수회원'이면서 가장 최근에 가입한 회원의 이름을 조회
SELECT MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME = '우수회원';

--28: TB_MEMBER 테이블에서 등급이 '일반회원'이면서 이름에 '김'이 들어가는 회원의 수를 조회
SELECT COUNT(*)
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME = '일반회원'
AND MEMBER_NAME LIKE '%김%';

--29: TB_MEMBER 테이블에서 등급이 '특별회원'이 아닌 회원의 수를 조회
SELECT COUNT(*)
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE GRADE_NAME != '특별회원';

--30: TB_MEMBER 테이블에서 등급이 '우수회원'인 회원 중에서 아이디가 가장 큰 회원의 이름을 조회
SELECT MEMBER_NAME
FROM TB_MEMBER
JOIN TB_GRADE ON (GRADE = GRADE_CODE)
WHERE LENGTH(MEMBERID) = (
    SELECT MAX(LENGTH(MEMBERID))
    FROM TB_MEMBER
)
AND GRADE_NAME = '우수회원';



SELECT MAX(MEMBERID)
FROM TB_MEMBER;

SELECT * FROM TB_MEMBER;
SELECT MEMBER_NAME FROM TB_MEMBER 
WHERE GRADE = '20'
AND MEMBERID = (
	SELECT MAX(MEMBERID)
	FROM TB_MEMBER
	WHERE GRADE = '20'
);






